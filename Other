

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>RANDOM FUNCTIONS
random.choice -> select random element from a sequence
              -> use when you have a list, tuple, or string with defined values
              -> pick from existing options
              -> duplicates possible

random.randint -> random integer between two numbers
               -> includes last element
               -> generate a number within a range
               -> only integers
random.sample(supported_palettes,8)  -> return 8 unique and random options from my list
                                     -> no duplicates
                                     -> order of selection is random

random.uniform  -> works the same way as randint but with floats

range() -> creates a sequence of numbers (not list, just object you can iterate with)
        -> Automatically generated sequence only for number
        -> For other data structures it does not.Need to use len() to explicit the length
        -> often used for loops
        -> Three ways of use it:
                                 - for i in range(5):   # default starts from 0, 5 exclusive
                                 - for i in range(2, 7):   # start=2, stop=7 (exclusive)
                                 - for i in range(0, 10, 2):   # start=0, stop=10, step=2

len()   -> returns the length (number of items) of a sequence (list,tuple,string,dictionary)

First use len -> gives the count
Then range    -> generates that many loop steps




random.randrange #todo


remaining_palette = [p for p in all_palettes if p not in cycle_palettes_list][0] #todo